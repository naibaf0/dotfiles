# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#
# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"


#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}


# --------------------
# Module configuration
# --------------------

#
# completion
#

# Set a custom path for the completion dump file.
# If none is provided, the default ${ZDOTDIR:-${HOME}}/.zcompdump is used.
#zstyle ':zim:completion' dumpfile "${ZDOTDIR:-${HOME}}/.zcompdump-${ZSH_VERSION}"

#
# environment
#

# Set a custom terminal title format. Use prompt expansion strings for dynamic data.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# For example, '%n@%m: %~' corresponds to 'username@host: /current/directory'.
zstyle ':zim:termtitle' format '%n@%m: %1~'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
#zstyle ':zim:input' double-dot-expand yes

#
# ssh
#

# Load these ssh identities with the ssh module.
zstyle ':zim:ssh' ids 'id_rsa' 'id_ecdsa' 'id_ed25519'

#
# zsh-autosuggestions
#

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=10'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=10'

# ------------------
# Initialize modules
# ------------------

if [[ ${ZDOTDIR:-${HOME}}/.zim/init.zsh -ot ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  # Update static initialization script if it's outdated, before sourcing it
  source ${ZDOTDIR:-${HOME}}/.zim/zimfw.zsh init -q
fi
source ${ZDOTDIR:-${HOME}}/.zim/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Bind up and down keys
zmodload -F zsh/terminfo +p:terminfo
if [[ -n ${terminfo[kcuu1]} && -n ${terminfo[kcud1]} ]]; then
  bindkey ${terminfo[kcuu1]} history-substring-search-up
  bindkey ${terminfo[kcud1]} history-substring-search-down
fi

bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down


# -----------------
# FZF configuration
# -----------------

if type fzf > /dev/null; then
  [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
  [ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
  [ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh
  export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  __gen_fzf_default_opts() {

    local color00='#282a36'
    local color01='#3a3c4e'
    local color02='#626483'
    local color03='#4d4f68'
    local color04='#62d6e8'
    local color05='#e9e9f4'
    local color06='#f1f2f8'
    local color07='#f7f7fb'
    local color08='#ea51b2'
    local color09='#b45bcf'
    local color0A='#ebff87'
    local color0B='#00f769'
    local color0C='#a1efe4'
    local color0D='#62d6e8'
    local color0E='#b45bcf'
    local color0F='#00f769'

    export FZF_DEFAULT_OPTS="
      --color=bg+:$color01,bg:$color00,spinner:$color0C,hl:$color0D
      --color=fg:$color04,header:$color0D,info:$color0A,pointer:$color0C
      --color=marker:$color0C,fg+:$color06,prompt:$color0A,hl+:$color0D
    "
  }
  __gen_fzf_default_opts
fi


# ------------------------
# GCloud SDK configuration
# ------------------------

[ -f /opt/google-cloud-sdk/path.zsh.inc ] && source /opt/google-cloud-sdk/path.zsh.inc
[ -f /opt/google-cloud-sdk/completion.zsh.inc ] && source /opt/google-cloud-sdk/completion.zsh.inc
[ -f /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc ] && source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc
[ -f /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc ] && source /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc

# direnv hook
# ===========
if which direnv >/dev/null 2>&1; then
  eval "$(direnv hook zsh)"
fi

setopt ignoreeof # ignore ctrl+d

# cdpath
# ======

# Set the the list of directories that cd searches.
cdpath+=(~)
cdpath+=(~/projects)

# Kubernetes
# ==========

# You can place all your kube configs in your local home under
# $HOME/.kube/configs. This functions collects all these config copies them
# into a temporary folder and makes them accessible via a KUBECONFIG.
# This enables you:
#   - join all configs and provide a common view across all kube contexts
#   - each shell session got their own dedicated configs
#   - share configs between tmux windows and their login shells
export_kubeconfigs () {
  KUBECONF_DIR=""
  # unset current context on new sessions; otherwise simply the first context will be used
  UNSET_CTX=1
  if [ -n "$TMUX_PANE" ]; then
    session_name=$(tmux list-panes -t "$TMUX_PANE" -F '#S' | head -n1)
    export KUBECONF_DIR="/tmp/kubeconfig-tmux-${session_name}"
    [ -d $KUBECONF_DIR ] && UNSET_CTX=0
    mkdir -p $KUBECONF_DIR 
  else
    export KUBECONF_DIR="$(mktemp -d /tmp/kubeconfig-shell-XXXXXXXX)"
  fi
  cp -n $HOME/.kube/configs/* $KUBECONF_DIR/
  export KUBECONFIG="$(ls -1 $KUBECONF_DIR/* | tr '\n' ':')"
  if [ $UNSET_CTX -eq 1 ]; then
    if which kubectl 2>&1 >/dev/null && kubectl config current-context >/dev/null 2>&1; then
      # Since we are joining several configs, the default context might
      # be set several times as well
      while [ -n "$(kubectl config current-context 2>/dev/null)" ]; do
          kubectl config unset current-context >/dev/null
      done
    fi
  fi
}

if which kubectl 2>&1 >/dev/null; then
  export_kubeconfigs
  alias k='kubectl "--context=${KUBECTL_CONTEXT:-$(kubectl config current-context)}" ${KUBECTL_NAMESPACE/[[:alnum:]-]*/--namespace=${KUBECTL_NAMESPACE}}'
fi


# ---------
# Functions
# ---------

#
# weather forecast
# 

weather() {
  curl -4 -k https://wttr.in/$1
}

#
# Useful enter-key
#

__magic-enter () {
  if [[ -z $BUFFER ]]; then
    echo ""
    if git rev-parse --is-inside-work-tree &>/dev/null; then
      git status
    fi
    zle redisplay
  else
    zle accept-line
  fi
}
zle -N __magic-enter
bindkey "^M" __magic-enter

#
# Program termination notice
#

function notify() {
  $*; notify-send --urgency=critical "Task completed." "Executed '$*'.\nreturn code: $?"
}


# -------
# Aliases
# -------

#
# Neovim
#

alias view='nvim -R'
alias nvsu='sudo -E nvim'
alias vim='nvim'
alias vimdiff='nvim -d'

#
# Files
#

alias grep='nocorrect grep --color=always -d skip'
alias cp='nocorrect cp -i' # confirm before overwriting something
alias df='df -h' # human-readable sizes
alias du='du -h'
alias free='free -m' # show sizes in MB
alias ls='ls -FXh --group-directories-first --color=always --time-style=+"%Y-%m-%d %H:%M"'
alias lsblk='lsblk -o SIZE,NAME,VENDOR,MODEL,LABEL,FSTYPE,RO,TYPE,MOUNTPOINT,UUID'

#
# Zathura
#

alias zathura='zathura --fork > /dev/null 2>&1'
alias z='zathura'

# -------------
# Powerlevel10k
# -------------

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
